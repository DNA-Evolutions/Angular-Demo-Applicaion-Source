/**
 * DNA Evolutions - JOpt.TourOptimizer
 * This is DNA\'s JOpt.TourOptimizer service. A RESTful Spring Boot application using springdoc-openapi and OpenAPI 3. JOpt.TourOpptimizer is a service that delivers route optimization and automatic scheduling features to be easily integrated into any third-party application. JOpt.TourOpptimizer encapsulates all necessary optimization functionality and provides a comprehensive REST API that offers a domain-specific optimization interface for the transportation industry. The service is stateless and does not come with graphical user interfaces, map depiction or any databases. These extensions and adjustments are supposed to be introduced by the consumer of the service while integrating it into his/her own application. The service will allow for many suitable adjustments and user-specific settings to adjust the behaviour and optimization goals (e.g. minimizing distance, maximizing resource utilization, etc.) through a comprehensive set of functions. This will enable you to gain control of the complete optimization processes.This service is based on JOpt (null)
 *
 * The version of the OpenAPI document: 1.2.6-SNAPSHOT
 * Contact: info@dna-evolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Violation } from './violation';


/**
 * The header of the whole solution. Summarizing important data like total number of routes, total time needed for ALL routes etc.
 */
export interface SolutionHeader { 
    /**
     * The numRoutes. The number of routes.
     */
    numRoutes: number;
    /**
     * The numScheduledRoutes. The number of routes that have non-zero time.
     */
    numScheduledRoutes: number;
    /**
     * The total number of Elements inlucidng Nodes and Resoures
     */
    totElements: number;
    /**
     * The unassignedElementIds, The ids of the elements that were unassigned during the Optimization run. Either by the AutoFilter or at start up due to conflicting hard-constraints.
     */
    unassignedElementIds: Array<string>;
    /**
     * The total cost is the abstract value that is used as figure of merit during the Optimization run.
     */
    totCost: number;
    /**
     * The total time needed for all routes.
     */
    totTime: string;
    /**
     * The total IdleTime accumulated over all routes.
     */
    totIdleTime: string;
    /**
     * The total Productive Time accumulated over all routes
     */
    totProdTime: string;
    /**
     * The total transit Time accumulated over all routes
     */
    totTranTime: string;
    /**
     * The total termination Time accumulated over all routes
     */
    totTermiTime: string;
    /**
     * The total distance accumulated over all routes
     */
    totDistance: string;
    /**
     * The total termiantion distance accumulated over all routes
     */
    totTermiDistance: string;
    /**
     * The jobViolations. The violation that occured on Job level. This does NOT contain individual node violations like lateness etc. Moreover,  it contains violations like relation-constraints between nodes. For example, node \'A\' needs to be visited before node \'B\' is violated.
     */
    jobViolations: Array<Violation>;
}

