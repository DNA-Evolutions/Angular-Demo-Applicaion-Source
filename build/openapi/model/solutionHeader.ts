/**
 * DNA Evolutions - JOpt.TourOptimizer
 * This is DNA\'s JOpt.TourOptimizer service. A RESTful Spring Boot application using springdoc-openapi and OpenAPI 3.
 *
 * The version of the OpenAPI document: unknown
 * Contact: info@dna-evolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Violation } from './violation';


/**
 * The header of the whole solution. Summarizing important data like total number of routes, total time needed for ALL routes etc.
 */
export interface SolutionHeader { 
    /**
     * The numRoutes. The number of routes.
     */
    numRoutes: number;
    /**
     * The numScheduledRoutes. The number of routes that have non-zero time.
     */
    numScheduledRoutes: number;
    /**
     * The total number of Elements inlucidng Nodes and Resoures
     */
    totElements: number;
    /**
     * The unassignedElementIds, The ids of the elements that were unassigned during the Optimization run. Either by the AutoFilter or at start up due to conflicting hard-constraints.
     */
    unassignedElementIds: Array<string>;
    /**
     * The total cost is the abstract value that is used as figure of merit during the Optimization run.
     */
    totCost: number;
    /**
     * The total time needed for all routes.
     */
    totTime: string;
    /**
     * The total IdleTime accumulated over all routes.
     */
    totIdleTime: string;
    /**
     * The total Productive Time accumulated over all routes
     */
    totProdTime: string;
    /**
     * The total transit Time accumulated over all routes
     */
    totTranTime: string;
    /**
     * The total termination Time accumulated over all routes
     */
    totTermiTime: string;
    /**
     * The total distance accumulated over all routes
     */
    totDistance: string;
    /**
     * The total termiantion distance accumulated over all routes
     */
    totTermiDistance: string;
    /**
     * The jobViolations. The violation that occured on Job level. This does NOT contain individual node violations like lateness etc. Moreover,  it contains violations like relation-constraints between nodes. For example, node \'A\' needs to be visited before node \'B\' is violated.
     */
    jobViolations: Array<Violation>;
}

