/**
 * DNA Evolutions - JOpt.TourOptimizer
 * This is DNA\'s JOpt.TourOptimizer service. A RESTful Spring Boot application using springdoc-openapi and OpenAPI 3. JOpt.TourOpptimizer is a service that delivers route optimization and automatic scheduling features to be easily integrated into any third-party application. JOpt.TourOpptimizer encapsulates all necessary optimization functionality and provides a comprehensive REST API that offers a domain-specific optimization interface for the transportation industry. The service is stateless and does not come with graphical user interfaces, map depiction or any databases. These extensions and adjustments are supposed to be introduced by the consumer of the service while integrating it into his/her own application. The service will allow for many suitable adjustments and user-specific settings to adjust the behaviour and optimization goals (e.g. minimizing distance, maximizing resource utilization, etc.) through a comprehensive set of functions. This will enable you to gain control of the complete optimization processes.This service is based on JOpt (null)
 *
 * The version of the OpenAPI document: 1.2.7-SNAPSHOT
 * Contact: info@dna-evolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { RouteHeader } from './routeHeader';
import { Position } from './position';
import { RouteElementDetail } from './routeElementDetail';
import { RouteTrip } from './routeTrip';


/**
 * The routes of the solution.
 */
export interface Route { 
    header?: RouteHeader;
    /**
     * The id is an optimizer provided number identifiying a route.
     */
    id: number;
    /**
     * The resourceId of the Visitor owning this route.
     */
    resourceId: string;
    routeTrip?: RouteTrip;
    /**
     * The startTime of the route. This is usually the start of the workingHours of the Resource. However, when using flextime/reduction-time the starttime can be different from the working hours start.
     */
    startTime: string;
    /**
     * The startElementId, is the element from where the route starts. By default, it is the Resource itself.
     */
    startElementId: string;
    startPosition?: Position;
    /**
     * The endElementId, is the element where the route stops. By default, it is the Resource itself.
     */
    endElementId: string;
    endPosition?: Position;
    /**
     * The optimizableElementIds. The list of optimizable elements that are part of the route.
     */
    optimizableElementIds: Array<string>;
    /**
     * The nonOptimizableElementIds. The list of non-optimizable elements that are part of the route.
     */
    nonOptimizableElementIds: Array<string>;
    /**
     * The optionalOptimizableElementIds. The list of optional elements that are part of the route.
     */
    optionalOptimizableElementIds: Array<string>;
    /**
     * The pillarElementIds. The list of pillar elements that are part of the route.
     */
    pillarElementIds: Array<string>;
    /**
     * The elementDetails. The list of details describing the route schedule.
     */
    elementDetails: Array<RouteElementDetail>;
    /**
     * The pillarLatestEffectiveArrivalOffsetMap. A map of additional time offsets for pillar elements. Each pillar has a latest possible arrival. As a route can consist of multiple pillars, the latest arrival at a certain pillar is also a function of  subsequent pillars. This latest arrival may shifted to a later time spot to allow shifitig a pillar around a normal node, even the normal node would fit before the pillar.
     */
    pillarLatestEffectiveArrivalOffsetMap?: { [key: string]: number; };
    /**
     * The flags. A list of flags indicating statii like which source finalized a route.
     */
    flags?: Array<Route.FlagsEnum>;
    /**
     * The additionalRouteStartOffset
     */
    additionalRouteStartOffset?: number;
    /**
     * The isInactive boolean describes if a route is deactivated.
     */
    isInactive?: boolean;
    /**
     * The isLockedDown. Describes if a route was undergoing lockdown.
     */
    isLockedDown?: boolean;
    /**
     * The isFinalized. Describes if a route was undergoing finalization.
     */
    isFinalized?: boolean;
}
export namespace Route {
    export type FlagsEnum = 'FINALIZED_PILLARFORCEARRANGER' | 'INACTIVE_PILLARFORCEARRANGER' | 'FINALIZED_ROUTE_FINALIZER' | 'INACTIVE_ROUTE_FINALIZER';
    export const FlagsEnum = {
        FinalizedPillarforcearranger: 'FINALIZED_PILLARFORCEARRANGER' as FlagsEnum,
        InactivePillarforcearranger: 'INACTIVE_PILLARFORCEARRANGER' as FlagsEnum,
        FinalizedRouteFinalizer: 'FINALIZED_ROUTE_FINALIZER' as FlagsEnum,
        InactiveRouteFinalizer: 'INACTIVE_ROUTE_FINALIZER' as FlagsEnum
    };
}


